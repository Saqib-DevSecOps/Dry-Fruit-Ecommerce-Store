# Generated by Django 5.0.5 on 2024-05-21 10:40

import django.core.validators
import django.db.models.deletion
import src.administration.admins.models
import tinymce.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='PickupLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_location', models.CharField(help_text='The nickname of the new pickup location', max_length=250)),
                ('name', models.CharField(help_text="The shipper's name.", max_length=250)),
                ('email', models.CharField(max_length=250)),
                ('phone', models.CharField(max_length=250)),
                ('address', models.CharField(max_length=250)),
                ('address_2', models.CharField(max_length=250)),
                ('city', models.CharField(max_length=250)),
                ('state', models.CharField(max_length=250)),
                ('country', models.CharField(max_length=250)),
                ('pin_code', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product Size Like 1KG etc', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('thumbnail_image', models.ImageField(blank=True, help_text='125*125 thumbnail image in png,jpg or jpeg format', null=True, upload_to='vendor/inventory/product_category/thumbnail')),
                ('banner_image', models.ImageField(blank=True, help_text='1024*762 thumbnail image in png,jpg or jpeg format', null=True, upload_to='vendor/inventory/product_category/banner')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.blogcategory')),
            ],
            options={
                'verbose_name_plural': 'Post Categories',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('thumbnail_image', models.ImageField(blank=True, null=True, upload_to='books/images/posts')),
                ('slug', models.SlugField(unique=True)),
                ('content', tinymce.models.HTMLField()),
                ('read_time', models.PositiveIntegerField(default=0, help_text='read time in minutes')),
                ('visits', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('publish', 'Publish')], default='publish', max_length=15)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.blogcategory')),
            ],
            options={
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('contact', models.CharField(max_length=100, null=True, validators=[src.administration.admins.models.validate_contact])),
                ('postal_code', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(100000, message='The pin code must be 6 digits.'), django.core.validators.MaxValueValidator(999999, message='The pin code must be 6 digits.')])),
                ('address', models.CharField(max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(10, message='The address must be at least 10 characters long.'), django.core.validators.MaxLengthValidator(300, message='The address must be at most 300 characters long.')])),
                ('city', models.CharField(max_length=1000, null=True)),
                ('state', models.CharField(max_length=1000, null=True)),
                ('country', models.CharField(choices=[('USA', 'USA'), ('Canada', 'Canada'), ('india', 'India')], max_length=20, null=True)),
                ('razorpay_order_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('total', models.FloatField(default=0)),
                ('service_charges', models.FloatField(default=0)),
                ('shipping_charges', models.FloatField(default=0)),
                ('sub_total', models.FloatField(default=0)),
                ('payment_type', models.CharField(choices=[('online', 'Online'), ('cod', 'Cash on Delivery')], default='online', max_length=50)),
                ('order_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('cancelled', 'cancelled'), ('delivery', 'Delivery'), ('completed', 'Completed')], default='pending', max_length=50)),
                ('payment_status', models.CharField(choices=[('unpaid', 'Un Paid'), ('pending', 'Pending'), ('cancel', 'Cancelled'), ('paid', 'Paid'), ('refunded', 'Refunded')], default='unpaid', max_length=50)),
                ('shipment_type', models.CharField(blank=True, choices=[('not-selected', 'Not Selected'), ('custom', 'Custom'), ('ship_rocket', 'Ship Rocket')], default='not-selected', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='OrderInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=100, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='admins.order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('razorpay_order_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('razorpay_signature_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('amount_paid', models.FloatField(default=0)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admins.order')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('thumbnail_image', models.ImageField(blank=True, help_text='125*125 thumbnail image in png,jpg or jpeg format', null=True, upload_to='vendor/inventory/product_category/thumbnail')),
                ('banner_image', models.ImageField(blank=True, help_text='1024*762 thumbnail image in png,jpg or jpeg format', null=True, upload_to='vendor/inventory/product_category/banner')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.productcategory')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sku', models.CharField(help_text="stock-keeping unit (SKU) is a store or catalog's product and service identification code", max_length=255)),
                ('thumbnail_image', models.ImageField(help_text='Thumbnail image for your product tis image will be visible on marketplace', null=True, upload_to='vendor/inventory/product/thumbnail')),
                ('title', models.CharField(help_text='Product name or title', max_length=255)),
                ('manufacturer_brand', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.SlugField(blank=True)),
                ('description', tinymce.models.HTMLField()),
                ('video_link', models.URLField(blank=True, null=True)),
                ('promotional', models.CharField(blank=True, choices=[('new', 'New'), ('hot', 'Hot')], max_length=50, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[src.administration.admins.models.positive_validator])),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Total quantity of product', validators=[src.administration.admins.models.quantity_validator])),
                ('discount', models.PositiveIntegerField(default=0, help_text='discount  in percentage', validators=[src.administration.admins.models.discount_validator], verbose_name='Discount in %')),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('total_sales', models.PositiveIntegerField(default=0)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('average_review', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.productcategory')),
            ],
            options={
                'verbose_name_plural': 'Products',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='vendor/inventory/product/images')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
            ],
            options={
                'verbose_name_plural': 'Product Images',
                'ordering': ['created_on'],
            },
        ),
        migrations.CreateModel(
            name='ProductRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.SmallIntegerField(default=1)),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
            ],
            options={
                'verbose_name_plural': 'Product Rating',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='ProductWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[src.administration.admins.models.positive_validator])),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.product')),
                ('weight', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.weight')),
            ],
        ),
        migrations.CreateModel(
            name='ProductSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.DecimalField(decimal_places=2, default=0, help_text='The Value of the item in cms. Must be more than 0.5.', max_digits=10, validators=[src.administration.admins.models.product_size_validator])),
                ('breadth', models.DecimalField(decimal_places=2, default=0, help_text='The Value of the item in cms. Must be more than 0.5.', max_digits=10, validators=[src.administration.admins.models.product_size_validator])),
                ('height', models.DecimalField(decimal_places=2, default=0, help_text='The Value of the item in cms. Must be more than 0.5.', max_digits=10, validators=[src.administration.admins.models.product_size_validator])),
                ('weight', models.DecimalField(decimal_places=2, default=0, help_text='The Value of the item in kgs. Must be more than 0.', max_digits=10, validators=[src.administration.admins.models.product_weight_validator])),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
                ('product_weight', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admins.productweight')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.PositiveIntegerField(default=1)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
                ('product_weight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.productweight')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_set', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
                ('product_weight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.productweight')),
            ],
        ),
        migrations.CreateModel(
            name='Shipment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(max_length=250, null=True)),
                ('tracking_id', models.CharField(blank=True, max_length=250, null=True)),
                ('tracking_url', models.URLField(blank=True, null=True)),
                ('tracking_number', models.CharField(blank=True, max_length=250, null=True)),
                ('description', models.TextField(default='*', null=True)),
                ('shipment_status', models.CharField(choices=[('initialized', 'Initialized'), ('pending', 'Pending'), ('cancelled', 'cancelled'), ('delivery', 'Delivery'), ('completed', 'Completed')], default='initialized', max_length=20)),
                ('started', models.DateTimeField(blank=True, null=True)),
                ('reached', models.DateTimeField(blank=True, null=True)),
                ('shipment_added', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admins.order')),
            ],
        ),
        migrations.CreateModel(
            name='ShipRocketOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shiprocket_order_id', models.CharField(blank=True, max_length=250, null=True)),
                ('shipment_id', models.CharField(blank=True, max_length=250, null=True)),
                ('status', models.CharField(blank=True, max_length=250, null=True)),
                ('status_code', models.CharField(blank=True, max_length=250, null=True)),
                ('onboarding_completed_now', models.CharField(blank=True, max_length=250, null=True)),
                ('awb_code', models.CharField(blank=True, max_length=250, null=True)),
                ('courier_company_id', models.CharField(blank=True, max_length=250, null=True)),
                ('courier_name', models.CharField(blank=True, max_length=250, null=True)),
                ('is_added', models.BooleanField(default=False)),
                ('order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admins.order')),
            ],
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.tag')),
            ],
            options={
                'verbose_name_plural': 'Product Tags',
                'ordering': ['-created_on'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(through='admins.ProductTag', to='admins.tag'),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admins.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
